apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

def calcBuildId() {
    String rawBuildId = System.getenv('BUILD_BUILDID')
    try {
        return Integer.parseInt(rawBuildId)
    } catch (Exception e) {
        println("BUILD ID '$rawBuildId' cannot be parsed to int")
        return 1;
    }
}

def calcVersionName() {
    return "1.0.${calcBuildId()}"
}

def getServerUrl() {
    def serverUrl = System.getenv("SERVER_URL")
    if (serverUrl == null || serverUrl.isEmpty()) {
        println("------------- SERVER_URL has not been set ---------------")
        return "\"\""
    }

    return "\"${serverUrl}\"";
}

def getClientToken() {
    def clientToken = System.getenv("CLIENT_TOKEN");
    if (clientToken == null || clientToken.isEmpty()) {
        println("------------- CLIENT_TOKEN has not been set ---------------")
        return "\"\""
    }

    return "\"${clientToken}\"";
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "pl.humberd.headlesskclientmobile"
        minSdkVersion 26
        targetSdkVersion 28
        versionCode calcBuildId()
        versionName calcVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField("String", "SERVER_URL", getServerUrl())
            buildConfigField("String", "CLIENT_TOKEN", getClientToken())
        }

        debug {
            buildConfigField("String", "SERVER_URL", "\"http://10.0.2.2:3000\"")
            buildConfigField("String", "CLIENT_TOKEN", "\"abc\"")
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation "com.android.support:support-compat:28.0.0"
    implementation 'com.google.firebase:firebase-messaging:17.6.0'
    implementation 'com.google.firebase:firebase-core:16.0.8'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:support-v4:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'
    implementation 'de.hdodenhof:circleimageview:3.0.0'

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'

    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.7'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'

    implementation 'org.ocpsoft.prettytime:prettytime:4.0.1.Final'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == "com.android.support") {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion "28.+"
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'
